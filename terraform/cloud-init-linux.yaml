#cloud-config
# Cloud-init configuration for Rocky Linux VM
# Installs Docker, SQL Server containers, Guacamole, Prometheus, and Grafana

package_update: true
package_upgrade: true

packages:
  - docker
  - docker-compose
  - git
  - curl
  - wget
  - htop
  - vim
  - net-tools
  - bind-utils
  - lvm2

groups:
  - docker

system_info:
  default_user:
    groups: [docker]

write_files:
  # Docker Compose file for SQL Server containers
  - path: /opt/sql-docker/docker-compose.yml
    owner: root:root
    permissions: '0644'
    content: |
      version: '3.8'
      
      services:
        # SQL Server Primary Instance
        sql-primary:
          image: mcr.microsoft.com/mssql/server:2022-latest
          container_name: sql-primary
          hostname: sql-primary
          environment:
            ACCEPT_EULA: "Y"
            SA_PASSWORD: "${sql_sa_password}"
            MSSQL_PID: "Developer"
            MSSQL_AGENT_ENABLED: "true"
          ports:
            - "1433:1433"
          volumes:
            - sql-primary-data:/var/opt/mssql
            - /opt/sql-docker/backups:/var/opt/mssql/backup
          networks:
            - sql-network
          restart: unless-stopped
          healthcheck:
            test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${sql_sa_password}" -Q "SELECT 1"
            interval: 30s
            timeout: 10s
            retries: 5
        
        # SQL Server Secondary Instance
        sql-secondary:
          image: mcr.microsoft.com/mssql/server:2022-latest
          container_name: sql-secondary
          hostname: sql-secondary
          environment:
            ACCEPT_EULA: "Y"
            SA_PASSWORD: "${sql_sa_password}"
            MSSQL_PID: "Developer"
            MSSQL_AGENT_ENABLED: "true"
          ports:
            - "1434:1433"
          volumes:
            - sql-secondary-data:/var/opt/mssql
            - /opt/sql-docker/backups:/var/opt/mssql/backup
          networks:
            - sql-network
          restart: unless-stopped
          healthcheck:
            test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${sql_sa_password}" -Q "SELECT 1"
            interval: 30s
            timeout: 10s
            retries: 5
        
        # SQL Server Witness Instance (for Always On AG)
        sql-witness:
          image: mcr.microsoft.com/mssql/server:2022-latest
          container_name: sql-witness
          hostname: sql-witness
          environment:
            ACCEPT_EULA: "Y"
            SA_PASSWORD: "${sql_sa_password}"
            MSSQL_PID: "Developer"
          ports:
            - "1435:1433"
          volumes:
            - sql-witness-data:/var/opt/mssql
          networks:
            - sql-network
          restart: unless-stopped
          healthcheck:
            test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${sql_sa_password}" -Q "SELECT 1"
            interval: 30s
            timeout: 10s
            retries: 5
        
        %{ if enable_prometheus ~}
        # Prometheus for monitoring
        prometheus:
          image: prom/prometheus:latest
          container_name: prometheus
          hostname: prometheus
          ports:
            - "9090:9090"
          volumes:
            - /opt/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus-data:/prometheus
          command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
          networks:
            - sql-network
          restart: unless-stopped
        %{ endif ~}
        
        %{ if enable_grafana ~}
        # Grafana for dashboards
        grafana:
          image: grafana/grafana:latest
          container_name: grafana
          hostname: grafana
          ports:
            - "3000:3000"
          environment:
            GF_SECURITY_ADMIN_PASSWORD: "admin"
            GF_INSTALL_PLUGINS: "grafana-clock-panel"
          volumes:
            - grafana-data:/var/lib/grafana
          networks:
            - sql-network
          restart: unless-stopped
        %{ endif ~}
        
        # Apache Guacamole (Clientless RDP/SSH)
        guacamole-db:
          image: postgres:15
          container_name: guacamole-postgres
          environment:
            POSTGRES_DB: guacamole_db
            POSTGRES_USER: guacamole_user
            POSTGRES_PASSWORD: guacamole_pass
          volumes:
            - guacamole-db-data:/var/lib/postgresql/data
          networks:
            - sql-network
          restart: unless-stopped
        
        guacd:
          image: guacamole/guacd:latest
          container_name: guacd
          networks:
            - sql-network
          restart: unless-stopped
        
        guacamole:
          image: guacamole/guacamole:latest
          container_name: guacamole
          hostname: guacamole
          ports:
            - "8080:8080"
          environment:
            GUACD_HOSTNAME: guacd
            POSTGRES_HOSTNAME: guacamole-db
            POSTGRES_DATABASE: guacamole_db
            POSTGRES_USER: guacamole_user
            POSTGRES_PASSWORD: guacamole_pass
          networks:
            - sql-network
          restart: unless-stopped
          depends_on:
            - guacamole-db
            - guacd
      
      networks:
        sql-network:
          driver: bridge
      
      volumes:
        sql-primary-data:
        sql-secondary-data:
        sql-witness-data:
        prometheus-data:
        grafana-data:
        guacamole-db-data:

  # Prometheus configuration
  - path: /opt/monitoring/prometheus/prometheus.yml
    owner: root:root
    permissions: '0644'
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
      
      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
        
        - job_name: 'sql-containers'
          static_configs:
            - targets: 
                - 'sql-primary:1433'
                - 'sql-secondary:1433'
                - 'sql-witness:1433'

  # Guacamole database initialization script
  - path: /opt/guacamole/init-guacamole-db.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      
      echo "Waiting for Guacamole database..."
      sleep 30
      
      # Initialize Guacamole database schema
      docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --postgres > /tmp/initdb.sql
      
      docker cp /tmp/initdb.sql guacamole-postgres:/tmp/initdb.sql
      docker exec guacamole-postgres psql -U guacamole_user -d guacamole_db -f /tmp/initdb.sql
      
      echo "Guacamole database initialized!"

  # Script to configure Guacamole with Windows RDP connection
  - path: /opt/guacamole/configure-rdp.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      # This script adds Windows VM RDP connection to Guacamole
      # Windows VM IP: ${windows_private_ip}
      
      cat > /opt/guacamole/rdp-connection.sql <<'EOF'
      -- Add Windows RDP connection
      INSERT INTO guacamole_connection (connection_name, protocol) 
      VALUES ('Windows Server 2022', 'rdp');
      
      INSERT INTO guacamole_connection_parameter (connection_id, parameter_name, parameter_value)
      VALUES 
        ((SELECT connection_id FROM guacamole_connection WHERE connection_name = 'Windows Server 2022'), 'hostname', '${windows_private_ip}'),
        ((SELECT connection_id FROM guacamole_connection WHERE connection_name = 'Windows Server 2022'), 'port', '3389'),
        ((SELECT connection_id FROM guacamole_connection WHERE connection_name = 'Windows Server 2022'), 'username', '${admin_username}'),
        ((SELECT connection_id FROM guacamole_connection WHERE connection_name = 'Windows Server 2022'), 'ignore-cert', 'true');
      EOF
      
      docker exec guacamole-postgres psql -U guacamole_user -d guacamole_db -f /opt/guacamole/rdp-connection.sql

  # Startup script
  - path: /opt/startup.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      
      echo "=== Starting SQL Server Docker Demo Environment ==="
      
      # Format and mount data disk
      if [ -b /dev/sdc ]; then
        echo "Configuring data disk..."
        parted /dev/sdc mklabel gpt
        parted /dev/sdc mkpart primary ext4 0% 100%
        mkfs.ext4 /dev/sdc1
        mkdir -p /mnt/data
        mount /dev/sdc1 /mnt/data
        echo '/dev/sdc1 /mnt/data ext4 defaults 0 0' >> /etc/fstab
        
        # Create Docker volumes directory
        mkdir -p /mnt/data/docker-volumes
        ln -sf /mnt/data/docker-volumes /var/lib/docker/volumes
      fi
      
      # Create directories
      mkdir -p /opt/sql-docker/backups
      mkdir -p /opt/monitoring/prometheus
      mkdir -p /opt/guacamole
      
      # Start Docker
      systemctl enable docker
      systemctl start docker
      
      # Start SQL containers
      cd /opt/sql-docker
      docker-compose up -d
      
      # Wait for containers to be healthy
      echo "Waiting for SQL Server containers to start..."
      sleep 60
      
      # Initialize Guacamole database
      /opt/guacamole/init-guacamole-db.sh
      
      # Configure RDP connection
      sleep 10
      /opt/guacamole/configure-rdp.sh
      
      echo "=== Environment setup complete! ==="
      echo "Access Guacamole: http://$(curl -s ifconfig.me):8080/guacamole"
      echo "Default credentials: guacadmin / guacadmin"

runcmd:
  # Enable and start Docker
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker ${admin_username}
  
  # Run startup script
  - /opt/startup.sh
  
  # Set up firewall
  - firewall-cmd --permanent --add-port=22/tcp
  - firewall-cmd --permanent --add-port=1433-1435/tcp
  - firewall-cmd --permanent --add-port=3000/tcp
  - firewall-cmd --permanent --add-port=8080/tcp
  - firewall-cmd --permanent --add-port=9090/tcp
  - firewall-cmd --reload

final_message: "SQL Server Docker Demo environment is ready! Access Guacamole at http://your-vm-ip:8080/guacamole"

